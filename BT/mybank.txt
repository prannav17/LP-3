// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

// Contract to manage student marks
contract MarksManagmtSys {

    // Define a structure for student details
    struct Student {
        int ID;
        string fName;
        string lName;
        int marks;
    }

    address owner;
    int public stdCount = 0;
    mapping(int => Student) public stdRecords;

    // Modifier to restrict access to only the owner
    modifier onlyOwner() {
        require(owner == msg.sender, "Only owner can perform this action");
        _;
    }

    // Constructor to set the contract owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add new student records
 function addNewRecords(int _ID, string memory _fName, string memory _lName, int _marks) public onlyOwner {
        // Increment the student count
        stdCount = stdCount + 1;

        // Add the student details to the records
        stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);
    }

    // Function to add bonus marks to the most recent student record
    function bonusMarks(int _bonus) public onlyOwner {
        // Ensure that there are student records
        require(stdCount > 0, "No student records available");

        // Add bonus marks to the last added student's marks
        stdRecords[stdCount].marks = stdRecords[stdCount].marks +_bonus;
        }
        }
