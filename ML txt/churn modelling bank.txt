# Calling all the dependencies for this project
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns


df = pd.read_csv('/content/Churn_Modelling.csv')


df.shape


df.drop(['CustomerId','RowNumber','Surname'], axis = 'columns', inplace =True)


df.isna().sum()


df.dtypes


df['Geography'].unique()


df['Gender'].unique()


df['Gender'].replace(['Male', 'Female'],[1, 0], inplace= True)


#one hot encoding
df = pd.get_dummies(data = df, columns=['Geography'])
df.dtypes


df['Exited'].value_counts()



def visualization(x, y, xlabel):
    plt.figure(figsize=(10,5))
    plt.hist([x, y], color=['red', 'green'], label = ['exit', 'not_exit'])
    plt.xlabel(xlabel,fontsize=20)
    plt.ylabel("No. of customers", fontsize=20)
    plt.legend()



#get in to temp fframe
df_exited = df[df['Exited']==1]['Tenure']
df_not_exited = df[df['Exited']==0]['Tenure']


visualization(df_exited, df_not_exited, "Tenure")



df_exited1 = df[df['Exited']==1]['Age']
df_not_exited1= df[df['Exited']==0]['Age']



visualization(df_exited1, df_not_exited1, "Tenure")



# normalization
cols_to_scale = ['CustomerId','CreditScore', 'Age','Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']




from sklearn.preprocessing import MinMaxScaler

# Define the scaler
scaler = MinMaxScaler()

# Select only the numerical features for scaling
numerical_features = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']

# Fit the scaler on the numerical features and transform them
df[numerical_features] = scaler.fit_transform(df[numerical_features])


#separate outcome or target col
X = df.drop(['Exited'], axis=1)
y = df['Exited']


from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

from sklearn.preprocessing import StandardScaler


# feature scaling

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)



import tensorflow as tf
from tensorflow import keras



model = keras.Sequential([
keras.layers.Dense(12, input_shape=(12,), activation='relu'),
    keras.layers.Dense(15, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])



model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])



model.fit(X_train, y_train, epochs=100)



model.evaluate(X_test, y_test)


yp=model.predict(X_test)



from sklearn.metrics import confusion_matrix , classification_report
import numpy as np

# Convert predicted probabilities to class labels using a threshold (e.g., 0.5)
y_pred = np.where(yp > 0.5, 1, 0)  # Assuming binary classification

# Now use yp_classes in the classification_report function
print(classification_report(y_test, y_pred))



tf.math.confusion_matrix(labels=y_test, predictions=y_pred)