# -*- coding: utf-8 -*-
"""Pract-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qOg4e2cd0IXW_4wmYNF1Iv5Y3ZAKnImv
"""

# Commented out IPython magic to ensure Python compatibility.
# First let's start with calling all the dependencies for this project
# Make sure the required packages are installed
!pip install numpy pandas matplotlib seaborn scikit-learn

# Import necessary libraries
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

# Load the dataset with the correct path
df = pd.read_csv(r'/content/sample_data/uber.csv')

# Display the first few rows
df.head()

# Display the shape of the dataset
df.shape

# Get information about the dataset
df.info()

# Find any null values present
df.isnull().sum()

# Drop rows with null values
df.dropna(axis=0, inplace=True)
df.isnull().sum()

# Calculate the distance between the pickup and drop coordinates using the Haversine formula for accuracy
def haversine(lon_1, lon_2, lat_1, lat_2):
    lon_1, lon_2, lat_1, lat_2 = map(np.radians, [lon_1, lon_2, lat_1, lat_2])  # Convert degrees to radians
    diff_lon = lon_2 - lon_1
    diff_lat = lat_2 - lat_1
    km = 2 * 6371 * np.arcsin(np.sqrt(np.sin(diff_lat/2.0)**2 +
                                      np.cos(lat_1) * np.cos(lat_2) * np.sin(diff_lon/2.0)**2))
    return km

# Find distance traveled per ride
df['Distance'] = haversine(df['pickup_longitude'], df['dropoff_longitude'],
                           df['pickup_latitude'], df['dropoff_latitude'])

# Round the distance to 2 decimal points
df['Distance'] = df['Distance'].astype(float).round(2)
df.head()

# Plot Distance vs Fare Amount
plt.scatter(df['Distance'], df['fare_amount'])
plt.xlabel("Distance")
plt.ylabel("fare_amount")
plt.show()

# Outliers
# Remove trips with very large distances and trips with 0 distance or fare amount
df.drop(df[df['Distance'] > 60].index, inplace=True)
df.drop(df[df['Distance'] == 0].index, inplace=True)
df.drop(df[df['fare_amount'] == 0].index, inplace=True)
df.drop(df[df['fare_amount'] < 0].index, inplace=True)
df.shape

# Remove rows with implausible fare amounts and distances
df.drop(df[(df['fare_amount'] > 100) & (df['Distance'] < 1)].index, inplace=True)
df.drop(df[(df['fare_amount'] < 100) & (df['Distance'] > 100)].index, inplace=True)
df.shape

# Plot Distance vs Fare Amount after removing outliers
plt.scatter(df['Distance'], df['fare_amount'])
plt.xlabel("Distance")
plt.ylabel("fare_amount")
plt.show()

# Display dataset information after cleaning
df.info()

# Create a new DataFrame with only specific columns
df2 = pd.DataFrame().assign(fare=df['fare_amount'], Distance=df['Distance'])
df2.info()

# Display the shape of the new DataFrame
df2.shape

# Plot the target fare distribution
plt.figure(figsize=[8,4])
sns.distplot(df2['fare'], color='g', hist_kws=dict(edgecolor="black", linewidth=2), bins=30)
plt.title('Target Variable Distribution')
plt.show()

# Plot Distance vs Fare Amount
plt.scatter(df2['Distance'], df2['fare'])
plt.xlabel("Distance")
plt.ylabel("fare_amount")
plt.show()

# Define independent and dependent variables
X = df2['Distance'].values.reshape(-1, 1)  # Independent variable
Y = df2['fare'].values.reshape(-1, 1)      # Dependent variable

# Scale by StandardScaler
from sklearn.preprocessing import StandardScaler
std = StandardScaler()
y_std = std.fit_transform(Y)
x_std = std.fit_transform(X)

# Split into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x_std, y_std, test_size=0.2, random_state=0)

# Simple linear regression
from sklearn.linear_model import LinearRegression
l_reg = LinearRegression()
l_reg.fit(X_train, y_train)

# Predict test values
y_pred = l_reg.predict(X_test)

# Find the error
from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

# Final plot
plt.subplot(2, 2, 1)
plt.scatter(X_train, y_train, color='red')
plt.plot(X_train, l_reg.predict(X_train), color="blue")
plt.title("Fare vs Distance (Training Set)")
plt.ylabel("fare_amount")
plt.xlabel("Distance")

plt.subplot(2, 2, 2)
plt.scatter(X_test, y_test, color='red')
plt.plot(X_train, l_reg.predict(X_train), color="blue")
plt.ylabel("fare_amount")
plt.xlabel("Distance")
plt.title("Fare vs Distance (Test Set)")
plt.show()

"""# New Section"""

