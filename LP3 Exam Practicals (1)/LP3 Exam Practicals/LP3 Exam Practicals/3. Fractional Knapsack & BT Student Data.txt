#DAA 3 - Fractional Knapsack Problem

import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class Item {
    int value, weight;

    Item(int value, int weight) {
        this.value = value;
        this.weight = weight;
    }
}

public class FractionalKnapsack {

    private static double getMaxValue(Item[] items, int capacity) {
        Arrays.sort(items, new Comparator<Item>() {
            @Override
            public int compare(Item o1, Item o2) {
                double r1 = (double) o1.value / o1.weight;
                double r2 = (double) o2.value / o2.weight;
                return Double.compare(r2, r1);
            }
        });

        double totalValue = 0;

        for (Item item : items) {
            if (capacity - item.weight >= 0) {
                capacity -= item.weight;
                totalValue += item.value;
            } else {
                totalValue += item.value * ((double) capacity / item.weight);
                break;
            }
        }

        return totalValue;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);


        System.out.print("Enter the number of items: ");
        int n = sc.nextInt();


        Item[] items = new Item[n];


        for (int i = 0; i < n; i++) {
            System.out.print("Enter value and weight for item " + (i + 1) + ": ");
            int value = sc.nextInt();
            int weight = sc.nextInt();
            items[i] = new Item(value, weight);
        }


        System.out.print("Enter the capacity of the knapsack: ");
        int capacity = sc.nextInt();


        double maxValue = getMaxValue(items, capacity);
        System.out.println("Maximum value we can obtain = " + maxValue);

        sc.close();
    }
}





-----------------------------------------------------------------------------------------------------------------


// Student Marks



// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.8.0;

// Build the Contract
contract MarksManagmtSys {
    // Create a structure for student details
    struct Student {
        int ID;
        string fName;
        string lName;
        int marks;
    }

    // Owner of the contract
    address owner;

    // Public student count
    int public stdCount = 0;

    // Mapping to store student records
    mapping(int => Student) public stdRecords;

    // Modifier to allow only the owner to execute certain functions
    modifier onlyOwner {
        require(owner == msg.sender, "Only the contract owner can execute this");
        _;
    }

    // Constructor to set the contract deployer as the owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add new records
    function addNewRecords(
        int _ID,
        string memory _fName,
        string memory _lName,
        int _marks
    ) public onlyOwner {
        // Increase the student count by 1
        stdCount = stdCount + 1;

        // Add the new student record to the mapping
        stdRecords[stdCount] = Student(_ID, _fName, _lName, _marks);
    }

    // Function to add bonus marks to the latest student record
    function bonusMarks(int _bonus) public onlyOwner {
        // Ensure there is at least one student before adding bonus marks
        require(stdCount > 0, "No student records available");

        // Add bonus marks to the last student's record
        stdRecords[stdCount].marks = stdRecords[stdCount].marks + _bonus;
    }
}



